<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:TagItem">
            <summary>Represents a tag/category.</summary>
        </member>
        <member name="F:TagItem.background">
            <summary>The item background image.</summary>
        </member>
        <member name="F:TagItem.check">
            <summary>The toggle check
            image.</summary>
        </member>
        <member name="F:TagItem.checkBackground">
            <summary>The check background
            image.</summary>
        </member>
        <member name="F:TagItem.tagText">
            <summary>The tag text.</summary>
        </member>
        <member name="F:TagItem.toggle">
            <summary>The toggle component.</summary>
        </member>
        <member name="M:TagItem.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>Event handler for when colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="T:QuizPage">
            <summary>Controls the behavior of the quiz page.</summary>
        </member>
        <member name="P:QuizPage.manager">
            <summary>Gets the database manager.</summary>
            <value>The databse manager.</value>
        </member>
        <member name="T:ThemePage">
            <summary>Controls the behavior of the ThemePage.</summary>
        </member>
        <member name="P:ThemePage.flyoutTapped">
            <summary>The action to perform when this page's flyout item is tapped. Overwritten to swap to next palette instead of navigating to page.</summary>
            <value>The action to perform.</value>
        </member>
        <member name="T:Tag">
            <summary>Represents a table of different tags.</summary>
        </member>
        <member name="P:Tag.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Tag.tag">
            <summary>Gets or sets the tag text.</summary>
            <value>The tag.</value>
        </member>
        <member name="T:ImageDownloader">
            <summary>A script for downloading images from google drive share links or direct png links.</summary>
        </member>
        <member name="M:ImageDownloader.GetImage(System.String,UnityEngine.UI.RawImage)">
            <summary>Gets an image from a url and loads it into the RawImage.
            Valid URLs can be of google drive share links and direct png links.</summary>
            <param name="url">The image URL.</param>
            <param name="image">The image component to display the URL image.</param>
        </member>
        <member name="M:ImageDownloader.SetImage(System.String,UnityEngine.UI.RawImage)">
            <summary>Sets the RawImage component's texture to be the image loaded from the provided URL.</summary>
            <param name="url">The image URL to load.</param>
            <param name="image">The RawImage component to display the URL image.</param>
            <returns>Returns when complete.</returns>
        </member>
        <member name="M:ImageDownloader.getFinalUrl(System.String)">
            <summary>Gets the final URL after resolving to the proper URL.</summary>
            <param name="url">The URL to resolve.</param>
            <returns>Resolved URL. Unchanged if the URL already points to a raw image.</returns>
        </member>
        <member name="M:ImageDownloader.getIdFromUrl(System.String)">
            <summary>Gets the image identifier from google drive share URL.</summary>
            <param name="url">The URL.</param>
            <returns>An image ID of a shared google drive image.</returns>
        </member>
        <member name="T:AppController">
            <summary>A singleton object that controls core aspects of the app such as theme, database, and startup.</summary>
        </member>
        <member name="F:AppController.manager">
            <summary>A reference to the local database manager.</summary>
        </member>
        <member name="F:AppController.question_bank">
            <summary>A list of question banks to be loaded into the local database.</summary>
        </member>
        <member name="F:AppController.flashcard_bank">
            <summary>A list of flashcards to import.</summary>
        </member>
        <member name="F:AppController.csvIngress">
            <summary>Writes data from CSV spreadsheets into the database.</summary>
        </member>
        <member name="F:AppController.controller">
            <summary>Controls current theme and list of themes.</summary>
        </member>
        <member name="M:AppController.Awake">
            <summary>Called after object instantiation.</summary>
        </member>
        <member name="T:CorrectAnswer">
            <summary>A table of all the correct answers. Describes the relation between a questionID and an answerID.</summary>
        </member>
        <member name="P:CorrectAnswer.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:CorrectAnswer.questionID">
            <summary>Gets or sets the question identifier.</summary>
            <value>The question identifier.</value>
        </member>
        <member name="P:CorrectAnswer.answerID">
            <summary>Gets or sets the answer identifier.</summary>
            <value>The answer identifier.</value>
        </member>
        <member name="T:QuestionCSV">
            <summary>Represents a question in a question bank CSV table.</summary>
        </member>
        <member name="P:QuestionCSV.ID">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:QuestionCSV.Question">
            <summary>Gets or sets the question text.</summary>
            <value>The question text.</value>
        </member>
        <member name="P:QuestionCSV.CorrectAnswer">
            <summary>Gets or sets the correct answer text.</summary>
            <value>The correct answer text.</value>
        </member>
        <member name="P:QuestionCSV.Answer1">
            <summary>Gets or sets answer1.</summary>
            <value>Incorrect answer 1.</value>
        </member>
        <member name="P:QuestionCSV.Answer2">
            <summary>Gets or sets answer2.</summary>
            <value>Incorrect answer 2.</value>
        </member>
        <member name="P:QuestionCSV.Answer3">
            <summary>Gets or sets answer3.</summary>
            <value>Incorrect answer 3.</value>
        </member>
        <member name="P:QuestionCSV.Answer4">
            <summary>Gets or sets answer4.</summary>
            <value>Incorrect answer 4.</value>
        </member>
        <member name="P:QuestionCSV.Answer5">
            <summary>Gets or sets answer5.</summary>
            <value>Incorrect answer 5.</value>
        </member>
        <member name="P:QuestionCSV.Explanation">
            <summary>Gets or sets the explanation text.</summary>
            <value>The Explanation text.</value>
        </member>
        <member name="P:QuestionCSV.ImageURL">
            <summary>Gets or sets the image url.</summary>
            <value>The image url.</value>
        </member>
        <member name="P:QuestionCSV.Tags">
            <summary>Gets or sets the tags.</summary>
            <value>The tags associated with this question.</value>
        </member>
        <member name="T:Swipe">
            <summary>Detects a simple swipe.</summary>
        </member>
        <member name="P:Swipe.navigation">
            <summary>Gets the navigation controller.</summary>
            <value>The navigation controller.</value>
        </member>
        <member name="M:Swipe.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>Called when dragging has ended.</summary>
            <param name="eventData">The event data.</param>
        </member>
        <member name="M:Swipe.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>Called when dragging begins.</summary>
            <param name="eventData">The pointer event data.</param>
        </member>
        <member name="M:Swipe.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>Called when dragging.</summary>
            <param name="eventData">The pointer event data.</param>
        </member>
        <member name="T:FlyoutItemController">
            <summary>A navigation item to be displayed in the flyout item list.</summary>
        </member>
        <member name="F:FlyoutItemController.pageName">
            <summary>The page name.</summary>
        </member>
        <member name="F:FlyoutItemController.title">
            <summary>The item title.</summary>
        </member>
        <member name="F:FlyoutItemController.icon">
            <summary>The item icon.</summary>
        </member>
        <member name="F:FlyoutItemController.background">
            <summary>The item background.</summary>
        </member>
        <member name="F:FlyoutItemController.button">
            <summary>The item button component.</summary>
        </member>
        <member name="F:FlyoutItemController.action">
            <summary>The item action
            to perform when tapped.</summary>
        </member>
        <member name="M:FlyoutItemController.OnTap">
            <summary>Called when item is tapped.</summary>
        </member>
        <member name="T:PaletteController">
            <summary>Controls the current theme / color pallette.</summary>
        </member>
        <member name="E:PaletteController.ColorsChanged">
            <summary>Occurs when palette/theme has changed.</summary>
        </member>
        <member name="T:PaletteController.ColorPaletteChangedDelegate">
            <summary>Custom delegate to send custom event arguments.</summary>
            <param name="_args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="F:PaletteController.palettes">
            <summary>The color palettes available.</summary>
        </member>
        <member name="P:PaletteController.currentPalette">
            <summary>Gets or sets the current palette.</summary>
            <value>The current palette.</value>
        </member>
        <member name="F:PaletteController._palette">
            <summary>The palette's private value.</summary>
        </member>
        <member name="M:PaletteController.Awake">
            <summary>Called when the object is instantiated.</summary>
        </member>
        <member name="M:PaletteController.NextPalette">
            <summary>Advances to the next color palette.</summary>
        </member>
        <member name="M:PaletteController.PreviousPalette">
            <summary>Returns to the previous palette.</summary>
        </member>
        <member name="M:PaletteController.GotoPalette(System.Int32)">
            <summary>Goes to the specified palette.</summary>
            <param name="palette">The palette.</param>
        </member>
        <member name="T:QuizMaster">
            <summary>Controls the behavior of the quiz view.</summary>
        </member>
        <member name="P:QuizMaster.manager">
            <summary>Gets the database manager.</summary>
            <value>The database manager.</value>
        </member>
        <member name="F:QuizMaster.currentQuiz">
            <summary>The current quiz.</summary>
        </member>
        <member name="F:QuizMaster.downloader">
            <summary>The image downloader.</summary>
        </member>
        <member name="F:QuizMaster.questionImage">
            <summary>The question image.</summary>
        </member>
        <member name="F:QuizMaster.questionText">
            <summary>The question text.</summary>
        </member>
        <member name="F:QuizMaster.QuestionBackground">
            <summary>The question background.</summary>
        </member>
        <member name="F:QuizMaster.buttonTexts">
            <summary>The answer button texts.</summary>
        </member>
        <member name="F:QuizMaster.buttons">
            <summary>The answer buttons.</summary>
        </member>
        <member name="F:QuizMaster.StopBtn">
            <summary>The exit button</summary>
        </member>
        <member name="F:QuizMaster.feedbackFrame">
            <summary>The feedback frame.</summary>
        </member>
        <member name="F:QuizMaster.feedbackText">
            <summary>The feedback text.</summary>
        </member>
        <member name="F:QuizMaster.tagList">
            <summary>The tag list
            being used.</summary>
        </member>
        <member name="F:QuizMaster.answered">
            <summary>Whether the user has given an answer yet. Becomes false after feedback is displayed.</summary>
        </member>
        <member name="P:QuizMaster.currentQuestion">
            <summary>Gets or sets the current question.</summary>
            <value>The current question.</value>
        </member>
        <member name="F:QuizMaster._question">
            <summary>The question
            private value.</summary>
        </member>
        <member name="F:QuizMaster.QuestionOrder">
            <summary>The question order.</summary>
        </member>
        <member name="F:QuizMaster.questionIndex">
            <summary>The current question index.</summary>
        </member>
        <member name="F:QuizMaster.givenAnswers">
            <summary>The answers the user has given thus far.</summary>
        </member>
        <member name="F:QuizMaster.answers">
            <summary>List of shuffled answers.</summary>
        </member>
        <member name="P:QuizMaster.correctAnswer">
            <summary>Gets the correct answer.</summary>
            <value>The correct answer.</value>
        </member>
        <member name="F:QuizMaster.maxAttempts">
            <summary>The maximum attempts
            on the current question before moving to the next question.</summary>
        </member>
        <member name="F:QuizMaster.currentAttempt">
            <summary>The current attempt for the current question.</summary>
        </member>
        <member name="M:QuizMaster.SetQuestion(System.Int32)">
            <summary>Sets the current question.</summary>
            <param name="id">The question identifier.</param>
        </member>
        <member name="M:QuizMaster.NextQuestion">
            <summary>Goes to the next question.</summary>
        </member>
        <member name="M:QuizMaster.GetAnswer">
            <summary>Gets the answer to current question.</summary>
            <returns>Answer to current question.</returns>
        </member>
        <member name="M:QuizMaster.GetAnswers">
            <summary>Gets a shuffled list of all possible answers to current question, correct and incorrect.</summary>
            <returns>Shuffled list of answers to the current question.</returns>
        </member>
        <member name="M:QuizMaster.GetIncorrectAnswers">
            <summary>Gets the incorrect answers for the current question.</summary>
            <returns>Incorrect answers for current question.</returns>
        </member>
        <member name="M:QuizMaster.StartQuiz(SavedQuiz)">
            <summary>Starts the given saved quiz.</summary>
            <param name="quiz">The saved quiz to start.</param>
        </member>
        <member name="M:QuizMaster.LoadQuiz(SavedQuiz)">
            <summary>Loads the given saved quiz.</summary>
            <param name="quiz">The saved quiz to load.</param>
        </member>
        <member name="M:QuizMaster.GenerateQuestionOrder">
            <summary>Generates the question order.</summary>
        </member>
        <member name="M:QuizMaster.UpdateQuiz">
            <summary>Updates the current quiz in the database.</summary>
        </member>
        <member name="M:QuizMaster.Answer1">
            <summary>Checks answer 1.</summary>
        </member>
        <member name="M:QuizMaster.Answer2">
            <summary>Checks answer 2.</summary>
        </member>
        <member name="M:QuizMaster.Answer3">
            <summary>Checks answer 3.</summary>
        </member>
        <member name="M:QuizMaster.Answer4">
            <summary>Checks answer 4.</summary>
        </member>
        <member name="M:QuizMaster.CheckAnswer(System.Int32)">
            <summary>Checks the given answer.</summary>
            <param name="answer">The answer given.</param>
        </member>
        <member name="M:QuizMaster.ViewAppearing">
            <summary>Called by default when the view appears.</summary>
        </member>
        <member name="M:QuizMaster.ViewDisappearing">
            <summary>Called by default when the view disappears.</summary>
        </member>
        <member name="M:QuizMaster.ExitQuiz">
            <summary>Exits the quiz.</summary>
        </member>
        <member name="M:QuizMaster.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>Event handler for when colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="T:AnswerTag">
            <summary>A table describing a tagID associated with an answerID.</summary>
        </member>
        <member name="P:AnswerTag.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:AnswerTag.tagID">
            <summary>Gets or sets the tag identifier.</summary>
            <value>The tag identifier.</value>
        </member>
        <member name="P:AnswerTag.answerID">
            <summary>Gets or sets the answer identifier.</summary>
            <value>The answer identifier.</value>
        </member>
        <member name="T:QuizItem">
            <summary>A Quiz Item toggle.</summary>
        </member>
        <member name="F:QuizItem.name">
            <summary>The quiz name.</summary>
        </member>
        <member name="F:QuizItem.toggle">
            <summary>The quiz toggle component.</summary>
        </member>
        <member name="P:QuizItem.quiz">
            <summary>Gets or sets the quiz.</summary>
            <value>The quiz.</value>
        </member>
        <member name="F:QuizItem._q">
            <summary>The private value of the quiz.</summary>
        </member>
        <member name="F:QuizItem.image">
            <summary>The item background.</summary>
        </member>
        <member name="M:QuizItem.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>Event handler for when colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="T:Question">
            <summary>A table that represents different questions.</summary>
        </member>
        <member name="P:Question.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Question.text">
            <summary>Gets or sets the question text.</summary>
            <value>The question text.</value>
        </member>
        <member name="P:Question.imageURL">
            <summary>Gets or sets the image URL.</summary>
            <value>The image URL.</value>
        </member>
        <member name="T:IncorrectAnswer">
            <summary>A table that defines a relation between a question and an answer.</summary>
        </member>
        <member name="P:IncorrectAnswer.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:IncorrectAnswer.questionID">
            <summary>Gets or sets the question identifier.</summary>
            <value>The question identifier.</value>
        </member>
        <member name="P:IncorrectAnswer.answerID">
            <summary>Gets or sets the answer identifier.</summary>
            <value>The answer identifier.</value>
        </member>
        <member name="T:StyleHandler">
            <summary>Handles color palette changes. Add elements to list to have them automatically update when a color palette change happens.</summary>
        </member>
        <member name="P:StyleHandler.controller">
            <summary>Gets the app controller.</summary>
            <value>The app controller.</value>
        </member>
        <member name="F:StyleHandler.PrimaryColors">
            <summary>The image components to be recolored to the primary color of the app.</summary>
        </member>
        <member name="F:StyleHandler.SecondaryColors">
            <summary>The image components to be recolored to the secondary color of the app.</summary>
        </member>
        <member name="F:StyleHandler.PrimaryTexts">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.SecondaryTexts">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Titles">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Headers">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Spans">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Captions">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Subtitles">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Hints">
            <summary>The text components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.Buttons">
            <summary>The button components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.ScrollBars">
            <summary>The scrollbar components to be recolored.</summary>
        </member>
        <member name="F:StyleHandler.ScrollViewBackground">
            <summary>The image components to be recolored.</summary>
        </member>
        <member name="M:StyleHandler.UpdateColors">
            <summary>Manually triggers a pallete color update.</summary>
        </member>
        <member name="M:StyleHandler.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>Event handler for when colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="T:PageController">
            <summary>The base class of a page. Controls all base functions of a class, such as navigation and palette changes.</summary>
        </member>
        <member name="P:PageController.navigation">
            <summary>Gets the navigation controller.</summary>
            <value>The navigation controller.</value>
        </member>
        <member name="F:PageController.pageTitle">
            <summary>The display title for the page.</summary>
        </member>
        <member name="F:PageController.pageName">
            <summary>The page name. Should be unique because it is used to identify pages.</summary>
        </member>
        <member name="F:PageController.icon">
            <summary>The icon
            to represent this page in the flyout menu.</summary>
        </member>
        <member name="P:PageController.flyoutTapped">
            <summary>The action to perform when this page's flyout item is tapped.
            Change this if you want alter the behavior of the button.</summary>
            <value>The action to perform.</value>
        </member>
        <member name="P:PageController.OnAppearing">
            <summary>The action to perform when the page appears. Default is just to call 'PageAppearing'.</summary>
            <value>The action to perform.</value>
        </member>
        <member name="P:PageController.OnDisappearing">
            <summary>The action to perform when the page disappears.</summary>
            <value>The action to perform.</value>
        </member>
        <member name="F:PageController.startView">
            <summary>The view to switch to when the page is first navigated to.</summary>
        </member>
        <member name="F:PageController.currentView">
            <summary>The current view
            the page is displaying.</summary>
        </member>
        <member name="F:PageController.views">
            <summary>The views
            in this page.</summary>
        </member>
        <member name="P:PageController.viewObjects">
            <summary>Gets a list of all of the views' gameobjects.</summary>
            <value>The view gameobjects.</value>
        </member>
        <member name="M:PageController.GotoView(UnityEngine.GameObject)">
            <summary>Goes to the gameobject's view if it is in this page's view list.</summary>
            <param name="viewObject">The view object to go to.</param>
        </member>
        <member name="M:PageController.GotoView(View)">
            <summary>Goes to the given view.</summary>
            <param name="view">The view to go to.</param>
        </member>
        <member name="M:PageController.PageAppearing">
            <summary>Executed when this page is going to appear, which is when it is navigated to.</summary>
        </member>
        <member name="M:PageController.PageDisappearing">
            <summary>Executed when this page is going to disappear, which is when it is navigated away from.</summary>
        </member>
        <member name="M:PageController.ViewAppearing(UnityEngine.GameObject)">
            <summary>Invoke the 'OnAppearing' function on a view component in the given gameobject if it is a child of this page.</summary>
            <param name="view">The gameobject who's view is about to appear.</param>
        </member>
        <member name="M:PageController.ViewAppearing(View)">
            <summary>Invokes the 'OnAppearing' function on in the given view if it is a child of this page.</summary>
            <param name="view">The view that is about to appear.</param>
        </member>
        <member name="M:PageController.ViewDisappearing(UnityEngine.GameObject)">
            <summary>Invoke the 'OnDisappearing' function on a view component in the given gameobject if it is a child of this page.</summary>
            <param name="view">The gameobject who's view is about to disappear.</param>
        </member>
        <member name="M:PageController.ViewDisappearing(View)">
            <summary>Invokes the 'OnDisappearing' function on in the given view if it is a child of this page.</summary>
            <param name="view">The view that is about to disappear.</param>
        </member>
        <member name="T:FlyoutController">
            <summary>Manages the flyout menu.</summary>
        </member>
        <member name="F:FlyoutController.animator">
            <summary>The animator
            component that animates the flyout menu.</summary>
        </member>
        <member name="F:FlyoutController.itemList">
            <summary>The list of flyout page items.</summary>
        </member>
        <member name="F:FlyoutController.touchBackground">
            <summary>The touch background
            of they flyout menu.</summary>
        </member>
        <member name="F:FlyoutController.alpha">
            <summary>The alpha
            of the touch background.</summary>
        </member>
        <member name="F:FlyoutController.visible">
            <summary>If the flyout is visible or not.</summary>
        </member>
        <member name="F:FlyoutController.playing">
            <summary>If the animator component is playing.</summary>
        </member>
        <member name="M:FlyoutController.FlyoutTapped">
            <summary>Called when the flyout button is tapped.</summary>
        </member>
        <member name="M:FlyoutController.SelectCurrent">
            <summary>Selects the currently open page.</summary>
        </member>
        <member name="M:FlyoutController.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>An event handler for when the colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="F:SQLite.CreateFlags.None">
            <summary>
            Use the default creation options
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.ImplicitPK">
            <summary>
            Create a primary key index for a property called 'Id' (case-insensitive).
            This avoids the need for the [PrimaryKey] attribute.
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.ImplicitIndex">
            <summary>
            Create indices for properties ending in 'Id' (case-insensitive).
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.AllImplicit">
            <summary>
            Create a primary key for a property called 'Id' and
            create an indices for properties ending in 'Id' (case-insensitive).
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.AutoIncPK">
            <summary>
            Force the primary key property to be auto incrementing.
            This avoids the need for the [AutoIncrement] attribute.
            The primary key property on the class should have type int or long.
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.FullTextSearch3">
            <summary>
            Create virtual table using FTS3
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.FullTextSearch4">
            <summary>
            Create virtual table using FTS4
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnection">
            <summary>
            An open connection to a SQLite database.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.DatabasePath">
            <summary>
            Gets the database path used by this connection.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.LibVersionNumber">
            <summary>
            Gets the SQLite library version number. 3007014 would be v3.7.14
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TimeExecution">
            <summary>
            Whether Trace lines should be written that show the execution time of queries.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.Trace">
            <summary>
            Whether to write queries to <see cref="P:SQLite.SQLiteConnection.Tracer"/> during execution.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.Tracer">
            <summary>
            The delegate responsible for writing trace lines.
            </summary>
            <value>The tracer.</value>
        </member>
        <member name="P:SQLite.SQLiteConnection.StoreDateTimeAsTicks">
            <summary>
            Whether to store DateTime properties as ticks (true) or strings (false).
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.StoreTimeSpanAsTicks">
            <summary>
            Whether to store TimeSpan properties as ticks (true) or strings (false).
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.DateTimeStringFormat">
            <summary>
            The format to use when storing DateTime properties as strings. Ignored if StoreDateTimeAsTicks is true.
            </summary>
            <value>The date time string format.</value>
        </member>
        <member name="P:SQLite.SQLiteConnection.DateTimeStyle">
            <summary>
            The DateTimeStyles value to use when parsing a DateTime property string.
            </summary>
            <value>The date time style.</value>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="openFlags">
            Flags controlling how the connection should be opened.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(SQLite.SQLiteConnectionString)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="connectionString">
            Details on how to find and open the database.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.EnableWriteAheadLogging">
            <summary>
            Enables the write ahead logging. WAL is significantly faster in most scenarios
            by providing better concurrency and better disk IO performance than the normal
            journal mode. You only need to call this function once in the lifetime of the database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.Quote(System.String)">
            <summary>
            Convert an input string to a quoted SQL string that can be safely used in queries.
            </summary>
            <returns>The quoted string.</returns>
            <param name="unsafeString">The unsafe string to quote.</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.SetKey(System.String)">
            <summary>
            Sets the key used to encrypt/decrypt the database with "pragma key = ...".
            This must be the first thing you call before doing anything else with this connection
            if your database is encrypted.
            This only has an effect if you are using the SQLCipher nuget package.
            </summary>
            <param name="key">Ecryption key plain text that is converted to the real encryption key using PBKDF2 key derivation</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.SetKey(System.Byte[])">
            <summary>
            Sets the key used to encrypt/decrypt the database.
            This must be the first thing you call before doing anything else with this connection
            if your database is encrypted.
            This only has an effect if you are using the SQLCipher nuget package.
            </summary>
            <param name="key">256-bit (32 byte) ecryption key data</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.EnableLoadExtension(System.Boolean)">
            <summary>
            Enable or disable extension loading.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:SQLite.SQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping(System.Type,SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>
            <returns>
            The mapping represents the schema of the columns of the database and contains
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping``1(SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>
            <returns>
            The mapping represents the schema of the columns of the database and contains
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable(SQLite.TableMapping)">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable``1(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable(System.Type,SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>
            <returns>
            Whether the table was created or migrated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``2(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``3(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``4(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``5(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables(SQLite.CreateFlags,System.Type[])">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Creates an index for the specified object property.
            e.g. CreateIndex&lt;Client&gt;(c => c.Name);
            </summary>
            <typeparam name="T">Type to reflect to a database table.</typeparam>
            <param name="property">Property to index</param>
            <param name="unique">Whether the index should be unique</param>
            <returns>Zero on success.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetTableInfo(System.String)">
            <summary>
            Query the built-in sqlite table_info table for a specific tables columns.
            </summary>
            <returns>The columns contains in the table.</returns>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.NewCommand">
            <summary>
            Creates a new SQLiteCommand. Can be overridden to provide a sub-class.
            </summary>
            <seealso cref="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)"/>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="ps">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new SQLiteCommand given the command text with named arguments. Place a "[@:$]VVV"
            in the command text for each of the arguments. VVV represents an alphanumeric identifier.
            For example, @name :name and $name can all be used in the query.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of "[@:$]VVV" in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand" />
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method when return primitive values.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.QueryScalars``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns the first column of each row of the result.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for the first column of each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator (retrieved by calling GetEnumerator() on the result of this method)
            will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator (retrieved by calling GetEnumerator() on the result of this method)
            will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type.
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type.
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.FindWithQuery``1(System.String,System.Object[])">
            <summary>
            Attempts to retrieve the first object that matches the query from the table
            associated with the specified type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.FindWithQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Attempts to retrieve the first object that matches the query from the table
            associated with the specified type.
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="P:SQLite.SQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:SQLite.SQLiteConnection.SaveTransactionPoint">
             <summary>
             Creates a savepoint in the database at the current point in the transaction timeline.
             Begins a new transaction if one is not in progress.
            
             Call <see cref="M:SQLite.SQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
             Call <see cref="M:SQLite.SQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
             Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction, committing all changes.
             </summary>
             <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String,System.Boolean)">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
            <param name="noThrow">true to avoid throwing exceptions, false otherwise</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Release(System.String)">
             <summary>
             Releases a savepoint returned from <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint
                makes changes since that savepoint permanent if the savepoint began the transaction,
                or otherwise the changes are permanent pending a call to <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            
             The RELEASE command is like a COMMIT for a SAVEPOINT.
             </summary>
             <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RunInTransaction(System.Action)">
            <summary>
            Executes <paramref name="action"/> within a (possibly nested) transaction by wrapping it in a SAVEPOINT. If an
            exception occurs the whole transaction is rolled back, not just the current savepoint. The exception
            is rethrown.
            </summary>
            <param name="action">
            The <see cref="T:System.Action"/> to perform within a transaction. <paramref name="action"/> can contain any number
            of operations on the connection but should never call <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or
            <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            <param name="runInTransaction"/>
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.UpdateAll(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object,SQLite.TableMapping)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll(SQLite.TableMapping)">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Backup(System.String,System.String)">
            <summary>
            Backup the entire database to the specified path.
            </summary>
            <param name="destinationDatabasePath">Path to backup file.</param>
            <param name="databaseName">The name of the database to backup (usually "main").</param>
        </member>
        <member name="T:SQLite.SQLiteConnectionString">
            <summary>
            Represents a parsed connection string.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnectionString.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnectionString with all the data needed to open an SQLiteConnection.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnectionString.#ctor(System.String,System.Boolean,System.Object,System.Action{SQLite.SQLiteConnection},System.Action{SQLite.SQLiteConnection},System.String)">
            <summary>
            Constructs a new SQLiteConnectionString with all the data needed to open an SQLiteConnection.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
            <param name="key">
            Specifies the encryption key to use on the database. Should be a string or a byte[].
            </param>
            <param name="preKeyAction">
            Executes prior to setting key for SQLCipher databases
            </param>
            <param name="postKeyAction">
            Executes after setting key for SQLCipher databases
            </param>
            <param name="vfsName">
            Specifies the Virtual File System to use on the database.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnectionString.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean,System.Object,System.Action{SQLite.SQLiteConnection},System.Action{SQLite.SQLiteConnection},System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnectionString with all the data needed to open an SQLiteConnection.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="openFlags">
            Flags controlling how the connection should be opened.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
            <param name="key">
            Specifies the encryption key to use on the database. Should be a string or a byte[].
            </param>
            <param name="preKeyAction">
            Executes prior to setting key for SQLCipher databases
            </param>
            <param name="postKeyAction">
            Executes after setting key for SQLCipher databases
            </param>
            <param name="vfsName">
            Specifies the Virtual File System to use on the database.
            </param>
            <param name="dateTimeStringFormat">
            Specifies the format to use when storing DateTime properties as strings.
            </param>
            <param name="storeTimeSpanAsTicks">
            Specifies whether to store TimeSpan properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeTimeSpanAsTicks = true.
            </param>
        </member>
        <member name="P:SQLite.TableAttribute.WithoutRowId">
             <summary>
             Flag whether to create the table without rowid (see https://sqlite.org/withoutrowid.html)
            
             The default is <c>false</c> so that sqlite adds an implicit <c>rowid</c> to every table created.
             </summary>
        </member>
        <member name="T:SQLite.CollationAttribute">
            <summary>
            Select the collating sequence to use on a column.
            "BINARY", "NOCASE", and "RTRIM" are supported.
            "BINARY" is the default.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)">
            <summary>
            Invoked every time an instance is loaded from the database.
            </summary>
            <param name='obj'>
            The newly created object.
            </param>
            <remarks>
            This can be overridden in combination with the <see cref="M:SQLite.SQLiteConnection.NewCommand"/>
            method to hook into the life-cycle of objects.
            </remarks>
        </member>
        <member name="M:SQLite.FastColumnSetter.GetFastSetter``1(SQLite.SQLiteConnection,SQLite.TableMapping.Column)">
             <summary>
             Creates a delegate that can be used to quickly set object members from query columns.
            
             Note that this frontloads the slow reflection-based type checking for columns to only happen once at the beginning of a query,
             and then afterwards each row of the query can invoke the delegate returned by this function to get much better performance (up to 10x speed boost, depending on query size and platform).
             </summary>
             <typeparam name="T">The type of the destination object that the query will read into</typeparam>
             <param name="conn">The active connection.  Note that this is primarily needed in order to read preferences regarding how certain data types (such as TimeSpan / DateTime) should be encoded in the database.</param>
             <param name="column">The table mapping used to map the statement column to a member of the destination object type</param>
             <returns>
             A delegate for fast-setting of object members from statement columns.
            
             If no fast setter is available for the requested column (enums in particular cause headache), then this function returns null.
             </returns>
        </member>
        <member name="M:SQLite.FastColumnSetter.CreateNullableTypedSetterDelegate``2(SQLite.TableMapping.Column,System.Func{System.IntPtr,System.Int32,``1})">
             <summary>
             This creates a strongly typed delegate that will permit fast setting of column values given a Sqlite3Statement and a column index.
            
             Note that this is identical to CreateTypedSetterDelegate(), but has an extra check to see if it should create a nullable version of the delegate.
             </summary>
             <typeparam name="ObjectType">The type of the object whose member column is being set</typeparam>
             <typeparam name="ColumnMemberType">The CLR type of the member in the object which corresponds to the given SQLite columnn</typeparam>
             <param name="column">The column mapping that identifies the target member of the destination object</param>
             <param name="getColumnValue">A lambda that can be used to retrieve the column value at query-time</param>
             <returns>A strongly-typed delegate</returns>
        </member>
        <member name="M:SQLite.FastColumnSetter.CreateTypedSetterDelegate``2(SQLite.TableMapping.Column,System.Func{System.IntPtr,System.Int32,``1})">
            <summary>
            This creates a strongly typed delegate that will permit fast setting of column values given a Sqlite3Statement and a column index.
            </summary>
            <typeparam name="ObjectType">The type of the object whose member column is being set</typeparam>
            <typeparam name="ColumnMemberType">The CLR type of the member in the object which corresponds to the given SQLite columnn</typeparam>
            <param name="column">The column mapping that identifies the target member of the destination object</param>
            <param name="getColumnValue">A lambda that can be used to retrieve the column value at query-time</param>
            <returns>A strongly-typed delegate</returns>
        </member>
        <member name="T:SQLite.PreparedSqlLiteInsertCommand">
            <summary>
            Since the insert never changed, we only need to prepare once.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters the query based on a predicate.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Delete">
            <summary>
            Delete all the rows that match this query.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete all the rows that match this query and the given predicate.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Take(System.Int32)">
            <summary>
            Yields a given number of elements from the query and then skips the remainder.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Skip(System.Int32)">
            <summary>
            Skips a given number of elements from the query and then yields the remainder.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.CompileNullBinaryExpression(System.Linq.Expressions.BinaryExpression,SQLite.TableQuery{`0}.CompileResult)">
            <summary>
            Compiles a BinaryExpression where one of the parameters is null.
            </summary>
            <param name="expression">The expression to compile</param>
            <param name="parameter">The non-null parameter</param>
        </member>
        <member name="M:SQLite.TableQuery`1.Count">
            <summary>
            Execute SELECT COUNT(*) on the query
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Execute SELECT COUNT(*) on the query with an additional WHERE clause.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ToList">
            <summary>
            Queries the database and returns the results as a List.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ToArray">
            <summary>
            Queries the database and returns the results as an array.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.First">
            <summary>
            Returns the first element of this query.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.FirstOrDefault">
            <summary>
            Returns the first element of this query, or null if no element is found.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first element of this query that matches the predicate.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first element of this query that matches the predicate, or null
            if no element is found.
            </summary>
        </member>
        <member name="T:CSVIngress">
            <summary>Imports CSV data into the local database.</summary>
            <seealso cref="T:DBManager" />
        </member>
        <member name="P:CSVIngress.manager">
            <summary>Gets the database manager.</summary>
            <value>The database manager.</value>
        </member>
        <member name="M:CSVIngress.ImportAnswerSheet(UnityEngine.TextAsset)">
            <summary>Imports an answer sheet.</summary>
            <param name="csvfile">The csv file.</param>
        </member>
        <member name="M:CSVIngress.ImportFlashcardSheet(UnityEngine.TextAsset)">
            <summary>Imports a flashcard sheet.</summary>
            <param name="csvfile">The csv file.</param>
        </member>
        <member name="T:QuestionTag">
            <summary>A table that defines a relation between a question and a tag.</summary>
        </member>
        <member name="P:QuestionTag.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:QuestionTag.questionID">
            <summary>Gets or sets the question identifier.</summary>
            <value>The question identifier.</value>
        </member>
        <member name="P:QuestionTag.tagID">
            <summary>Gets or sets the tag identifier.</summary>
            <value>The tag identifier.</value>
        </member>
        <member name="T:NavigationController">
            <summary>The object that controls the app's navigation. Only one should exist.</summary>
        </member>
        <member name="F:NavigationController.currentPage">
            <summary>The current page that the navigation controller is on.</summary>
        </member>
        <member name="F:NavigationController.navButtonController">
            <summary>The nav button controller. Animates the button and flyout menu.</summary>
        </member>
        <member name="F:NavigationController.pages">
            <summary>The pages in the app.</summary>
        </member>
        <member name="F:NavigationController.flyoutItems">
            <summary>The pages to be added to the app. To make a flyout item that acts as a button, just create a page and overwrite what the 'flyoutTapped' action does.</summary>
        </member>
        <member name="F:NavigationController.flyoutList">
            <summary>The GameObject that will contain flyout items. Should have a vertical layout and be within a scroll view.</summary>
        </member>
        <member name="F:NavigationController.flyoutItemPrefab">
            <summary>The flyout item prefab
            to attach to the flyoutList.</summary>
        </member>
        <member name="P:NavigationController.controller">
            <summary>Gets the app controller.</summary>
            <value>The app controller.</value>
        </member>
        <member name="F:NavigationController.flyoutTouchBackground">
            <summary>The flyout touch background. Becomes active and visible when the flyout is visible. Swipe left to close the app flyout.</summary>
        </member>
        <member name="F:NavigationController.navBackground">
            <summary>The nav bar background.</summary>
        </member>
        <member name="F:NavigationController.navTitle">
            <summary>The nav bar title.</summary>
        </member>
        <member name="F:NavigationController.navButton">
            <summary>The nav bar button.</summary>
        </member>
        <member name="F:NavigationController.flyoutHeaderBackground">
            <summary>The flyout header background.</summary>
        </member>
        <member name="F:NavigationController.flyoutBackground">
            <summary>The flyout background.</summary>
        </member>
        <member name="F:NavigationController.flyoutFooterBackground">
            <summary>The flyout footer background.</summary>
        </member>
        <member name="F:NavigationController.PrimaryTexts">
            <summary>
            The texts to be recolored. Since NavigationController is a Singleton, it cannot inherit StyleHandler. To make up for this, the NavigationController subscribes to the ColorsChanged event.
            </summary>
        </member>
        <member name="M:NavigationController.SetPage(PageController)">
            <summary>Sets the page to be viewed.
            Will disable the current page, and then enable the page to go to.</summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:NavigationController.GotoPage(PageController)">
            <summary>Navigates to the specified page.</summary>
            <param name="page">The page to navigate to.</param>
        </member>
        <member name="M:NavigationController.GotoPage(System.String)">
            <summary>Navigates to the specified page by name.</summary>
            <param name="name">The name of the page to navigate to.</param>
        </member>
        <member name="M:NavigationController.GotoPage(System.Int32)">
            <summary>Navigates to a page by index.</summary>
            <param name="index">The index of the page to navigate to.</param>
        </member>
        <member name="M:NavigationController.EnablePage(PageController)">
            <summary>Enables the specified page.</summary>
            <param name="page">The page to enable.</param>
        </member>
        <member name="M:NavigationController.EnablePage(System.String)">
            <summary>Enables the page by name.</summary>
            <param name="name">The name of the page to enable.</param>
        </member>
        <member name="M:NavigationController.DisablePage(PageController)">
            <summary>Disables the specified page.</summary>
            <param name="page">The page to disable.</param>
        </member>
        <member name="M:NavigationController.DisablePage(System.String)">
            <summary>Disables the page by name.</summary>
            <param name="name">The name of the page to disable.</param>
        </member>
        <member name="M:NavigationController.DisableCurrentPage">
            <summary>Disables the current page.</summary>
        </member>
        <member name="M:NavigationController.DisableAllPages">
            <summary>Disables all pages.</summary>
        </member>
        <member name="M:NavigationController.FindPage(System.String,PageController@)">
            <summary>Finds the first page with the given name.</summary>
            <param name="name">The name of the page to find.</param>
            <param name="page">The page to return.
            Will be null if there was no page to be found. The function will return 'False' if there was no page to find.</param>
            <returns>Returns 'True' if there was a match and page will be non-null; Returns 'False' if there was no match and page will be null.</returns>
        </member>
        <member name="M:NavigationController.OpenFlyout">
            <summary>Opens the flyout.</summary>
        </member>
        <member name="M:NavigationController.CloseFlyout">
            <summary>Closes the flyout.</summary>
        </member>
        <member name="M:NavigationController.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>Event Handler for when the colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="T:HomePage">
            <summary>The Home page controller.</summary>
        </member>
        <member name="T:Flashcard">
            <summary>A table that defines a flashcard.</summary>
        </member>
        <member name="P:Flashcard.id">
            <summary>Gets or sets the flashcard identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Flashcard.term">
            <summary>Gets or sets the flashcard term.</summary>
            <value>The flashcard term.</value>
        </member>
        <member name="P:Flashcard.definition">
            <summary>Gets or sets the definition.</summary>
            <value>The flashcard definition.</value>
        </member>
        <member name="T:FlashcardTag">
            <summary>A table that defines a relation between a flashcard and a tag.</summary>
        </member>
        <member name="P:FlashcardTag.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:FlashcardTag.tagID">
            <summary>Gets or sets the tag identifier.</summary>
            <value>The tag identifier.</value>
        </member>
        <member name="P:FlashcardTag.flashcardID">
            <summary>Gets or sets the flashcard identifier.</summary>
            <value>The flashcard identifier.</value>
        </member>
        <member name="T:NewQuiz">
            <summary>Represents a new quiz view.</summary>
        </member>
        <member name="F:NewQuiz.onActiveTogglesChanged">
            <summary>An event for handling toggle value changes.</summary>
        </member>
        <member name="P:NewQuiz.manager">
            <summary>Gets the database manager.</summary>
            <value>The database manager.</value>
        </member>
        <member name="F:NewQuiz.quizSelect">
            <summary>The gameobject containing the quiz select
            view.</summary>
        </member>
        <member name="F:NewQuiz.tagList">
            <summary>The gameobject that will parent the tag list items.</summary>
        </member>
        <member name="F:NewQuiz.tagItem">
            <summary>The tag list item prefab.</summary>
        </member>
        <member name="F:NewQuiz.quizName">
            <summary>The quiz name.</summary>
        </member>
        <member name="F:NewQuiz.saveButton">
            <summary>The save button.</summary>
        </member>
        <member name="P:NewQuiz.items">
            <summary>Gets the TagItem components from the tag list.</summary>
            <value>The TagItem list.</value>
        </member>
        <member name="P:NewQuiz.selected">
            <summary>Finds selected toggles from items.</summary>
            <value>The selected items.</value>
        </member>
        <member name="P:NewQuiz.tags">
            <summary>Gets the tags selected and turns them into a string.</summary>
            <value>The tags as a string.</value>
        </member>
        <member name="P:NewQuiz.defaultName">
            <summary>Gets a default name.</summary>
            <value>The default name.</value>
        </member>
        <member name="F:NewQuiz.r">
            <summary>Regex placeholder.</summary>
        </member>
        <member name="F:NewQuiz.m">
            <summary>MatchCollection placeholder.</summary>
        </member>
        <member name="M:NewQuiz.RegisterToggle(UnityEngine.UI.Toggle)">
            <summary>Registers the toggle to report value changes.</summary>
            <param name="toggle">The toggle to register.</param>
        </member>
        <member name="M:NewQuiz.HandleToggleValueChanged(System.Boolean)">
            <summary>Handles the toggle value changed event.</summary>
            <param name="isOn">if set to <c>true</c> [is on].</param>
        </member>
        <member name="M:NewQuiz.UnregisterToggle(UnityEngine.UI.Toggle)">
            <summary>Unregisters the toggle from reporting value changes.</summary>
            <param name="toggle">The toggle to unregister.</param>
        </member>
        <member name="M:NewQuiz.RemoveTags">
            <summary>Removes all tags in the tag list.</summary>
        </member>
        <member name="M:NewQuiz.LoadTags">
            <summary>Repopulates the tag list.</summary>
        </member>
        <member name="M:NewQuiz.SaveQuiz">
            <summary>Saves the quiz.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NewQuiz.ValidateInfo(System.Int32)" -->
        <member name="M:NewQuiz.OnToggleUpdate">
            <summary>Called when a toggle's value has changed.</summary>
        </member>
        <member name="T:ColorPalette">
            <summary>Defines a color palette.</summary>
        </member>
        <member name="F:ColorPalette.Primary">
            <summary>The primary
            color of the app.</summary>
        </member>
        <member name="F:ColorPalette.Secondary">
            <summary>The secondary
            color of the app.</summary>
        </member>
        <member name="F:ColorPalette.Tertiary">
            <summary>The third
            color of the app.</summary>
        </member>
        <member name="F:ColorPalette.Quaternary">
            <summary>The fourth
            color of the app</summary>
        </member>
        <member name="F:ColorPalette.Navbar">
            <summary>The navbar
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutBtn">
            <summary>The flyout button color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutTouchBackground">
            <summary>The flyout touch background
            color</summary>
        </member>
        <member name="F:ColorPalette.FlyoutHeaderBackground">
            <summary>The flyout header background
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutBackground">
            <summary>The flyout background
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutItemBackground">
            <summary>The flyout item background
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutText">
            <summary>The flyout text
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutIcon">
            <summary>The flyout icon
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlyoutFooterBackground">
            <summary>The flyout footer background
            color.</summary>
        </member>
        <member name="F:ColorPalette.PageBackground">
            <summary>The page background
            color.</summary>
        </member>
        <member name="F:ColorPalette.PrimaryText">
            <summary>The primary text
            color.</summary>
        </member>
        <member name="F:ColorPalette.SecondaryText">
            <summary>The secondary text
            color.</summary>
        </member>
        <member name="F:ColorPalette.Title">
            <summary>The title
            color.</summary>
        </member>
        <member name="F:ColorPalette.Header">
            <summary>The header
            color</summary>
        </member>
        <member name="F:ColorPalette.Span">
            <summary>The span
            color.</summary>
        </member>
        <member name="F:ColorPalette.Caption">
            <summary>The caption
            color.</summary>
        </member>
        <member name="F:ColorPalette.Subtitle">
            <summary>The subtitle
            color.</summary>
        </member>
        <member name="F:ColorPalette.Hint">
            <summary>The hint
            color.</summary>
        </member>
        <member name="F:ColorPalette.ItemBase">
            <summary>The item base
            color.</summary>
        </member>
        <member name="F:ColorPalette.ItemNormal">
            <summary>The item's normal
            color.</summary>
        </member>
        <member name="F:ColorPalette.ItemSelected">
            <summary>The item's selected
            color.</summary>
        </member>
        <member name="F:ColorPalette.ItemText">
            <summary>The item's text
            color.</summary>
        </member>
        <member name="F:ColorPalette.CheckboxBackground">
            <summary>The checkbox background
            color.</summary>
        </member>
        <member name="F:ColorPalette.CheckColor">
            <summary>The checkbox check color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonBase">
            <summary>The button base
            color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonNormal">
            <summary>The button's normal
            color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonDisabled">
            <summary>The button's disabled
            color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonHover">
            <summary>The button's hover
            color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonPressed">
            <summary>The button's pressed
            color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonSelected">
            <summary>The button's selected
            color.</summary>
        </member>
        <member name="F:ColorPalette.ButtonText">
            <summary>The button's text
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollViewBackground">
            <summary>The scroll view background
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarBase">
            <summary>The scroll bar base
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarNormal">
            <summary>The scroll bar's normal
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarDisabled">
            <summary>The scroll bar's disabled
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarHover">
            <summary>The scroll bar's hover
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarPressed">
            <summary>The scroll bar's pressed
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarSelected">
            <summary>The scroll bar's selected
            color.</summary>
        </member>
        <member name="F:ColorPalette.scrollBarBackground">
            <summary>The scroll bar's background
            color.</summary>
        </member>
        <member name="F:ColorPalette.QuestionBackground">
            <summary>The question background
            color.</summary>
        </member>
        <member name="F:ColorPalette.QuestionText">
            <summary>The question text
            color.</summary>
        </member>
        <member name="F:ColorPalette.AnswerBackground">
            <summary>The answer background
            color.</summary>
        </member>
        <member name="F:ColorPalette.AnswerText">
            <summary>The answer text
            color.</summary>
        </member>
        <member name="F:ColorPalette.AnswerBackgroundCorrect">
            <summary>The answer background correct
            color.</summary>
        </member>
        <member name="F:ColorPalette.AnswerTextCorrect">
            <summary>The answer text correct
            color.</summary>
        </member>
        <member name="F:ColorPalette.AnswerBackgroundIncorrect">
            <summary>The answer background incorrect
            color.</summary>
        </member>
        <member name="F:ColorPalette.AnswerTextIncorrect">
            <summary>The answer text incorrect
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlashcardBackground">
            <summary>The flashcard background
            color.</summary>
        </member>
        <member name="F:ColorPalette.FlashcardText">
            <summary>The flashcard text color.</summary>
        </member>
        <member name="M:ColorPalette.Highlight(UnityEngine.Color)">
            <summary>Highlights the specified color.</summary>
            <param name="color">The color to highlight.</param>
            <returns>Highlighted color.</returns>
        </member>
        <member name="M:ColorPalette.Highlight(UnityEngine.Color,System.Single)">
            <summary>Highlights the specified color by a float amount.</summary>
            <param name="color">The color to be highlighted.</param>
            <param name="amount">The amount to highlight by.</param>
            <returns>
              <br />
            </returns>
        </member>
        <member name="M:ColorPalette.Shadow(UnityEngine.Color)">
            <summary>Shadows the specified color.</summary>
            <param name="color">The color to darken.</param>
            <returns>Darkened color.</returns>
        </member>
        <member name="M:ColorPalette.Shadow(UnityEngine.Color,System.Single)">
            <summary>Shadows the specified color by a float amount.</summary>
            <param name="color">The color to be darkened.</param>
            <param name="amount">The amount to darken by.</param>
            <returns>Darkened color.</returns>
        </member>
        <member name="T:ColorPaletteChangedEventArgs">
            <summary>Custom argument class to contain information about what palette was swapped to.</summary>
        </member>
        <member name="P:ColorPaletteChangedEventArgs.palette">
            <summary>Gets the color palette that was changed to.</summary>
            <value>The color palette.</value>
        </member>
        <member name="F:ColorPaletteChangedEventArgs._palette">
            <summary>The palette's private value.</summary>
        </member>
        <member name="M:ColorPaletteChangedEventArgs.#ctor(ColorPalette)">
            <summary>Initializes a new instance of the <see cref="T:ColorPaletteChangedEventArgs" /> class.</summary>
            <param name="p">The palette that was swapped to.</param>
        </member>
        <member name="T:NavbarButtonController">
            <summary>Controls the flyout button and flyout menu animation.</summary>
        </member>
        <member name="M:NavbarButtonController.Tapped">
            <summary>Called when the nav bar button is pressed.</summary>
        </member>
        <member name="M:NavbarButtonController.Open">
            <summary>Opens the flyout menu if it isn't already.</summary>
        </member>
        <member name="M:NavbarButtonController.Close">
            <summary>Closes the flyout menu if it isn't already.</summary>
        </member>
        <member name="T:QuizSelect">
            <summary>Controls the behavior of the QuizSelect View.</summary>
        </member>
        <member name="F:QuizSelect.onActiveTogglesChanged">
            <summary>Event for when a toggle's value changes.</summary>
        </member>
        <member name="P:QuizSelect.manager">
            <summary>Gets the database manager.</summary>
            <value>The database manager.</value>
        </member>
        <member name="F:QuizSelect.qmaster">
            <summary>The QuizMaster view.</summary>
        </member>
        <member name="F:QuizSelect.quizList">
            <summary>The quiz list.</summary>
        </member>
        <member name="F:QuizSelect.quizItem">
            <summary>The quiz item
            prefab.</summary>
        </member>
        <member name="F:QuizSelect.buttons">
            <summary>The quiz list buttons.</summary>
        </member>
        <member name="F:QuizSelect.startBtnTxt">
            <summary>The start button text.</summary>
        </member>
        <member name="P:QuizSelect.selected">
            <summary>Gets the selected quiz.</summary>
            <value>The selected quiz.</value>
        </member>
        <member name="F:QuizSelect.group">
            <summary>A toggle group for the quiz list.</summary>
        </member>
        <member name="M:QuizSelect.GetSelectedToggle">
            <summary>Gets the selected toggle.</summary>
            <returns>Selected toggle.</returns>
        </member>
        <member name="M:QuizSelect.GetSelectedObject">
            <summary>Gets the selected object.</summary>
            <returns>Selected object.</returns>
        </member>
        <member name="M:QuizSelect.GetSelectedQuiz">
            <summary>Gets the selected quiz.</summary>
            <returns>Selected quiz.</returns>
        </member>
        <member name="M:QuizSelect.RegisterToggle(UnityEngine.UI.Toggle)">
            <summary>Registers the toggle to report when its value changes.</summary>
            <param name="toggle">The toggle to register.</param>
        </member>
        <member name="M:QuizSelect.HandleToggleValueChanged(System.Boolean)">
            <summary>Handles the toggle value changed event.</summary>
            <param name="isOn">Whether the toggle is on or off.</param>
        </member>
        <member name="M:QuizSelect.UnregisterToggle(UnityEngine.UI.Toggle)">
            <summary>Unregisters the toggle from reporting when its value changes.</summary>
            <param name="toggle">The toggle to unregister.</param>
        </member>
        <member name="M:QuizSelect.RemoveItems">
            <summary>Removes all items from quiz list.</summary>
        </member>
        <member name="M:QuizSelect.RemoveItem">
            <summary>Removes the currently selected item.</summary>
        </member>
        <member name="M:QuizSelect.LoadItems">
            <summary>Repopulates the quiz list.</summary>
        </member>
        <member name="M:QuizSelect.StartQuiz">
            <summary>Starts the selected quiz.</summary>
        </member>
        <member name="M:QuizSelect.NewQuiz">
            <summary>Navigates to the new quiz view.</summary>
        </member>
        <member name="M:QuizSelect.OnSelectedChanged">
            <summary>Called when selected quiz changes.</summary>
        </member>
        <member name="T:FlashcardCSV">
            <summary>A class used for holding data from a CSV and writing it to the local database.</summary>
        </member>
        <member name="P:FlashcardCSV.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:FlashcardCSV.term">
            <summary>Gets or sets the flashcard term (front).</summary>
            <value>The flashcard term.</value>
        </member>
        <member name="P:FlashcardCSV.definition">
            <summary>Gets or sets the flashcard definition (back).</summary>
            <value>The flashcard definition.</value>
        </member>
        <member name="P:FlashcardCSV.imageURL">
            <summary>Gets or sets the image URL associated with this flashcard.</summary>
            <value>The flashcard image URL.</value>
        </member>
        <member name="P:FlashcardCSV.tags">
            <summary>Gets or sets the tags.</summary>
            <value>The tags associated with this flashcard.</value>
        </member>
        <member name="T:SavedQuiz">
            <summary>A table that defines a saved/in-progress question set.</summary>
        </member>
        <member name="P:SavedQuiz.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:SavedQuiz.name">
            <summary>Gets or sets the set name.</summary>
            <value>The name.</value>
        </member>
        <member name="P:SavedQuiz.tags">
            <summary>Gets or sets the tags associated with this set.</summary>
            <value>The tags.</value>
        </member>
        <member name="P:SavedQuiz.inProgress">
            <summary>Gets or sets a value indicating whether the set is in progress or not.</summary>
            <value>
              <c>true</c> if in progress; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SavedQuiz.questionOrder">
            <summary>Gets or sets the question order.</summary>
            <value>The question order.</value>
        </member>
        <member name="P:SavedQuiz.currentQuestion">
            <summary>Gets or sets the current question.</summary>
            <value>The current question.</value>
        </member>
        <member name="P:SavedQuiz.givenAnswers">
            <summary>Gets or sets the given answers.</summary>
            <value>The given answers.</value>
        </member>
        <member name="P:SavedQuiz.currentAttempt">
            <summary>Gets or sets the current attempt.</summary>
            <value>The current attempt.</value>
        </member>
        <member name="T:Hint">
            <summary>A table that defines hints.</summary>
        </member>
        <member name="P:Hint.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Hint.QuestionID">
            <summary>Gets or sets the question identifier.</summary>
            <value>The question identifier.</value>
        </member>
        <member name="P:Hint.text">
            <summary>Gets or sets the hint text.</summary>
            <value>The hint text.</value>
        </member>
        <member name="T:Answer">
            <summary>Represents a table of different answers, right and wrong.</summary>
        </member>
        <member name="P:Answer.id">
            <summary>Gets or sets the identifier.</summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Answer.text">
            <summary>Gets or sets the answer text.</summary>
            <value>The answer text.</value>
        </member>
        <member name="T:PageStyleHandler">
            <summary>A StyleHandler for app pages.</summary>
        </member>
        <member name="F:PageStyleHandler.backgroundImage">
            <summary>The background of the page.</summary>
        </member>
        <member name="M:PageStyleHandler.ColorsChanged(ColorPaletteChangedEventArgs)">
            <summary>Event handler for when colors change.</summary>
            <param name="args">The <see cref="T:ColorPaletteChangedEventArgs" /> instance containing the color palette data.</param>
        </member>
        <member name="T:View">
            <summary>A visual element within a page.</summary>
        </member>
        <member name="F:View.page">
            <summary>The page
            this view belongs to.</summary>
        </member>
        <member name="P:View.OnAppearing">
            <summary>The action to perform when the view is appearing.</summary>
            <value>The action to perform.</value>
        </member>
        <member name="P:View.OnDisappearing">
            <summary>The action to perform when the view is disappearing.</summary>
            <value>The action to perform.</value>
        </member>
        <member name="M:View.ViewAppearing">
            <summary>Called by default when the view appears.</summary>
        </member>
        <member name="M:View.ViewDisappearing">
            <summary>Called by default when the view disappears.</summary>
        </member>
        <member name="T:Quizlet2CSV">
            <summary>A class for importing quizlet flashcard sets. Be sure to use '%*%' as the card separator, and '%!%' as the front/back separator.</summary>
        </member>
        <member name="M:Quizlet2CSV.CSVfromQuizlet">
            <summary>Generates a CSV file from quizlet flashcard set.</summary>
        </member>
        <member name="M:Quizlet2CSV.ExportCSV(System.Collections.Generic.List{FlashcardCSV})">
            <summary>Exports the CSV file.</summary>
            <param name="cards">The cards to export.</param>
        </member>
        <member name="T:JsonHandler">
            <summary>Handles JSON Serialization and Deserialization.</summary>
        </member>
        <member name="M:JsonHandler.Serialize(System.Object)">
            <summary>Serializes the specified object.</summary>
            <param name="obj">The object to serialize.</param>
            <returns>Serialized object (json text).</returns>
        </member>
        <member name="M:JsonHandler.Deserialize``1(System.String)">
            <summary>Deserializes the specified json.</summary>
            <typeparam name="T">Type to deserialize to.</typeparam>
            <param name="json">The json to deserialize.</param>
            <returns>Deserialized object (c# object).</returns>
        </member>
        <member name="T:ImageVericalAutoScaler">
            <summary>Automatically sizes an image vertically based on its given width, using the ratio of the original image.</summary>
        </member>
        <member name="F:ImageVericalAutoScaler.imgTransform">
            <summary>The image transform.</summary>
        </member>
        <member name="F:ImageVericalAutoScaler.image">
            <summary>The image
            to resize.</summary>
        </member>
        <member name="P:ImageVericalAutoScaler.ratio">
            <summary>Gets the ratio.</summary>
            <value>The ratio of the image to resize.</value>
        </member>
        <member name="P:ImageVericalAutoScaler.width">
            <summary>
            Gets the width using the ratio.
            </summary>
            <value>The width.</value>
        </member>
        <member name="M:ImageVericalAutoScaler.SetSize(UnityEngine.Vector2)">
            <summary>Sets the size of the image transform.</summary>
            <param name="size">The size.</param>
        </member>
        <member name="T:DBManager">
            <summary>Manages the local database.</summary>
        </member>
        <member name="P:DBManager.dbName">
            <summary>Gets the name of the database.</summary>
            <value>The name of the database. Currently 'local.db'.</value>
        </member>
        <member name="P:DBManager.dbPath">
            <summary>Gets the database path.</summary>
            <value>The database path dynamically.</value>
        </member>
        <member name="F:DBManager.db">
            <summary>The local database.</summary>
        </member>
        <member name="M:DBManager.Awake">
            <summary>Called when object is instantiated.</summary>
        </member>
        <member name="M:DBManager.ConnectDB">
            <summary>Connects to the local database. Encryption key is hard coded at the moment.</summary>
        </member>
        <member name="M:DBManager.Disconnect">
            <summary>Disconnects from the local database.</summary>
        </member>
        <member name="M:DBManager.CreateTables">
            <summary>Creates the tables necessary to store user info.</summary>
        </member>
        <member name="M:DBManager.AddItem``1(``0)">
            <summary>Adds an item to the database.</summary>
            <typeparam name="T">Type of table to insert data into.</typeparam>
            <param name="item">The item to insert.</param>
            <returns>If the row was added.</returns>
        </member>
        <member name="M:DBManager.AddItems``1(System.Collections.Generic.List{``0})">
            <summary>Adds multiple items to the local database.</summary>
            <typeparam name="T">Type of table to insert data into.</typeparam>
            <param name="items">The items to add.</param>
            <returns>True if the items were added.</returns>
        </member>
        <member name="M:DBManager.UpdateItem``1(``0)">
            <summary>Updates an already existing item.</summary>
            <typeparam name="T">Type of table to update item in.</typeparam>
            <param name="item">The item to update.</param>
            <returns>True if the item was updated.</returns>
        </member>
        <member name="M:DBManager.UpdateItems``1(System.Collections.Generic.List{``0})">
            <summary>Updates multiple already existing items in database.</summary>
            <typeparam name="T">Type of table to update items in.</typeparam>
            <param name="items">The items to update.</param>
            <returns>True if the items were updated.</returns>
        </member>
        <member name="M:DBManager.GetAll``1">
            <summary>Gets all items in a table.</summary>
            <typeparam name="T">Type of table to get all items from.</typeparam>
            <returns>All items in a list.</returns>
        </member>
        <member name="M:DBManager.DeleteAll``1">
            <summary>Deletes <em>all</em> items in a table.</summary>
            <typeparam name="T">Type of table to delete <em>all</em> items in.</typeparam>
            <returns>True if all rows or more were deleted.</returns>
        </member>
        <member name="M:DBManager.GetItems``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Gets a list of items based on a predicate.</summary>
            <typeparam name="T">Type of table to get items from.</typeparam>
            <param name="condition">The predicate. An anonymous function that returns true when a condition is met. This function is converted into SQL statements.</param>
            <returns>A list of objects that met the predicate's condition.</returns>
        </member>
        <member name="M:DBManager.GetItem``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Gets the first item that meets the condition, or null if there is none.</summary>
            <typeparam name="T">Type of table to get an item from.</typeparam>
            <param name="condition">The search condition. An anonymous function that returns true when a condition is met.</param>
            <returns>The first match</returns>
        </member>
        <member name="M:DBManager.DeleteItem``1(``0)">
            <summary>Deletes an item from a table.</summary>
            <typeparam name="T">Type of table to delete an item from.</typeparam>
            <param name="item">The item to delete.</param>
            <returns>True if the rows removed were 1 or more.</returns>
        </member>
        <member name="M:DBManager.DeleteItems``1(System.Collections.Generic.List{``0})">
            <summary>Deletes multiple items from a table.</summary>
            <typeparam name="T">Type of table to delete items from.</typeparam>
            <param name="items">The items to delete.</param>
            <returns>True if the rows deleted were larger than or equal to the number of items deleted.</returns>
        </member>
    </members>
</doc>
